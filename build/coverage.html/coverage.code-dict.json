{"/home/travis/build/npmtest/node-npmtest-swagger-node-express/test.js":"/* istanbul instrument in package npmtest_swagger_node_express */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-swagger-node-express/lib.npmtest_swagger_node_express.js":"/* istanbul instrument in package npmtest_swagger_node_express */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_swagger_node_express = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_swagger_node_express = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-swagger-node-express/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-swagger-node-express && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_swagger_node_express */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_swagger_node_express\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_swagger_node_express.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_swagger_node_express.rollup.js'] =\n            local.assetsDict['/assets.npmtest_swagger_node_express.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_swagger_node_express.__dirname +\n                    '/lib.npmtest_swagger_node_express.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-swagger-node-express/swagger-node-express/index.js":"module.exports = require('./lib');\n","/home/travis/build/npmtest/node-npmtest-swagger-node-express/swagger-node-express/lib/index.js":"var params            = require('./paramTypes');\nvar errorHandling     = require('./errorHandling');\nvar swagger           = require('./swagger');\n\nmodule.exports        = swagger;\nmodule.exports.params = params;\nmodule.exports.queryParam    = params.query;\nmodule.exports.pathParam     = params.path;\nmodule.exports.bodyParam     = params.body;\nmodule.exports.formParam     = params.form;\nmodule.exports.headerParam   = params.header;\nmodule.exports.error         = errorHandling.error;\n\n","/home/travis/build/npmtest/node-npmtest-swagger-node-express/swagger-node-express/lib/paramTypes.js":"/**\n *  Copyright 2013 Wordnik, Inc.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n'use strict';\n\n\nexports.query = exports.q = function(name, description, type, required, allowableValuesEnum, defaultValue) {\n  return {\n    'name' : name,\n    'description' : description,\n    'type' : type,\n    'required' : required,\n    'enum' : allowableValuesEnum,\n    'defaultValue' : defaultValue,\n    'paramType' : 'query'\n  };\n};\n\nexports.path = function(name, description, type, allowableValuesEnum, defaultValue) {\n  return {\n    'name' : name,\n    'description' : description,\n    'type' : type,\n    'required' : true,\n    'enum' : allowableValuesEnum,\n    'paramType' : 'path',\n    'defaultValue' : defaultValue\n  };\n};\n\nexports.body = function(name, description, type, defaultValue, required) {\n  return {\n    'name' : name,\n    'description' : description,\n    'type' : type,\n    'required' : required || false,\n    'paramType' : 'body',\n    'defaultValue' : defaultValue\n  };\n};\n\nexports.form = function(name, description, type, required, allowableValuesEnum, defaultValue) {\n  return {\n    'name' : name,\n    'description' : description,\n    'type' : type,\n    'required' : (typeof required !== 'undefined') ? required : true,\n    'enum' : allowableValuesEnum,\n    'paramType' : 'form',\n    'defaultValue' : defaultValue\n  };\n};\n\nexports.header = function(name, description, type, required) {\n  return {\n    'name' : name,\n    'description' : description,\n    'type' : type,\n    'required' : required,\n    'allowMultiple' : false,\n    'paramType' : 'header'\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-swagger-node-express/swagger-node-express/lib/errorHandling.js":"'use strict';\n\nexports.error = error;\n\n// TODO can this be removed?\n// Create Error JSON by code and text\nfunction error(code, description) {\n  return {\n    'code'   : code,\n    'message': description\n  };\n}\n","/home/travis/build/npmtest/node-npmtest-swagger-node-express/swagger-node-express/lib/swagger.js":"/**\n *  Copyright 2014 Wordnik, Inc.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n'use strict';\n\nvar _ = require('lodash');\nvar allowedMethods = ['get', 'post', 'put', 'patch', 'delete'];\nvar allowedDataTypes = ['string', 'integer', 'boolean', 'array'];\nvar toJsonType = require('./toJsonType');\nvar shallowClone = require('./shallowClone');\nvar resourceHelpers = require('./resourceHelpers');\nvar wrap = resourceHelpers.wrap;\nvar appendToApi = resourceHelpers.appendToApi;\nvar params = require('./paramTypes');\n\n\n// TODO-3.0.0 REMOVE\nvar ignoreAppHandlerInConstructor = true;\n\n// TODO-3.0.0 REMOVE\n// For backwards compatability, we just export a new instance of Swagger\nmodule.exports = exports = new Swagger();\n\nfunction Swagger(appHandler) {\n\n  if (!(this instanceof Swagger)){\n    return new Swagger(appHandler);\n  }\n\n  this.formatString = '.{format}';\n  this.resourcePath = '/api-docs' + this.formatString;\n  this.jsonSuffix = '.json';\n  this.basePath = '/';\n  this.apiInfo = null;\n  this.authorizations = null;\n  this.swaggerVersion = '1.2';\n  this.apiVersion = '1.0';\n  this.allModels = {};\n  this.validators = [];\n  this.appHandler = appHandler || null;\n  this.resources = {};\n  this.paramTypes = params;\n\n  // For backwards compatability\n  this.getModels = this.allModels;\n\n  // TODO-3.0.0 REMOVE\n  ignoreAppHandlerInConstructor = false;\n}\n\n//TODO-3.0.0 REMOVE\n/**\n * returns a new instance of swagger\n */\nSwagger.prototype.createNew = function(appHandler){\n  return new Swagger(appHandler);\n};\n\nSwagger.prototype.configureSwaggerPaths = function(format, path, suffix) {\n  if(path.indexOf('/') !== 0) path = '/' + path;\n  this.formatString = format;\n  this.resourcePath = path;\n  this.jsonSuffix = suffix;\n};\n\n// Configuring swagger will set the basepath and api version for all\n// subdocuments.  It should only be done once, and during bootstrap of the app\n\nSwagger.prototype.configure = function(bp, av) {\n  var self = this;\n  self.basePath = bp;\n  self.apiVersion = av;\n  self.setResourceListingPaths(self.appHandler);\n\n  // add the GET for resource listing\n  var resourceListing = _.bind(self.resourceListing, self);\n  self.appHandler.get(self.resourcePath.replace(self.formatString, self.jsonSuffix), resourceListing);\n\n  // update resources if already configured\n\n  _.forOwn(self.resources, function (resource) {\n    resource.apiVersion = av;\n    resource.basePath = bp;\n  });\n};\n\n// Convenience to set default headers in each response.\n\nSwagger.prototype.setHeaders = function(res) {\n  res.header('Access-Control-Allow-Headers', 'Content-Type, api_key');\n  res.header('Content-Type', 'application/json; charset=utf-8');\n};\n\n// creates declarations for each resource path.\n\nSwagger.prototype.setResourceListingPaths = function(app) {\n  var self = this;\n  _.forOwn(this.resources, function (resource, key) {\n\n    // pet.json => api-docs.json/pet\n    var path = self.baseApiFromPath(key);\n    app.get(path, function (req, res) {\n      // find the api base path from the request URL\n      // /api-docs.json/pet => /pet.json\n\n      var p = self.basePathFromApi(req.url.split('?')[0]);\n\n      // this handles the request\n      // api-docs.json/pet => pet.{format}\n      var r = self.resources[p] || self.resources[p.replace(self.formatString, '')];\n      if (!r) {\n        console.error('unable to find listing');\n        return self.stopWithError(res, {\n          'message': 'internal error',\n          'code': 500\n        });\n      } else {\n        self.setHeaders(res);\n        var data = self.filterApiListing(req, res, r);\n        data.basePath = self.basePath;\n        if (data.code) {\n          res.send(data, data.code);\n        } else {\n          res.send(JSON.stringify(data));\n        }\n      }\n    });\n  });\n};\n\nSwagger.prototype.basePathFromApi = function(path) {\n  var l = this.resourcePath.replace(this.formatString, this.jsonSuffix);\n  var p = path.substring(l.length + 1) + this.formatString;\n  return p;\n};\n\nSwagger.prototype.baseApiFromPath = function(path) {\n  var p = this.resourcePath.replace(this.formatString, this.jsonSuffix) + '/' + path.replace(this.formatString, '');\n  return p;\n};\n\nSwagger.prototype.addPropertiesToRequiredModels = function(properties, requiredModels) {\n  var self = this;\n  _.forOwn(properties, function (property) {\n    var type = property.type;\n    if(type) {\n      switch (type) {\n      case 'array':\n        if (property.items) {\n          var ref = property.items.$ref;\n          if (ref && requiredModels.indexOf(ref) < 0) {\n            requiredModels.push(ref);\n            self.addPropertiesToRequiredModels(self.allModels[ref].properties, requiredModels);\n          }\n        }\n        break;\n      case 'string':\n      case 'integer':\n        break;\n      default:\n        if (requiredModels.indexOf(type) < 0) {\n          requiredModels.push(type);\n        }\n        break;\n      }\n    }\n    else {\n      if (property.$ref){\n        requiredModels.push(property.$ref);\n        self.addPropertiesToRequiredModels(self.allModels[property.$ref].properties, requiredModels);\n      }\n    }\n    if (property.properties) {\n      self.addPropertiesToRequiredModels(property.properties, requiredModels);\n    }\n  });\n};\n\n// Applies a filter to an api listing.  When done, the api listing will only contain\n// methods and models that the user actually has access to.\n\nSwagger.prototype.filterApiListing = function(req, res, r) {\n  var self = this;\n  var excludedPaths = [];\n\n  if (!r || !r.apis) {\n    return self.stopWithError(res, {\n      'message': 'internal error',\n      'code': 500\n    });\n  }\n\n  _.forOwn(r.apis, function (api) {\n    for (var opKey in api.operations) {\n      if (!api.operations.hasOwnProperty(opKey)) {\n        continue;\n      }\n      var op = api.operations[opKey];\n      var path = api.path.replace(self.formatString, '').replace(/{.*\\}/, '*');\n      if (!self.canAccessResource(req, path, op.method)) {\n        excludedPaths.push(op.method + ':' + api.path);\n      }\n    }\n  });\n\n  //  clone attributes in the resource\n  var output = shallowClone(r);\n\n  // clone arrays for\n  if(r.produces) output.produces = r.produces.slice(0);\n  if(r.consumes) output.consumes = r.consumes.slice(0);\n  if(r.authorizations) output.authorizations = r.authorizations.slice(0);\n  if(r.protocols) output.protocols = r.protocols.slice(0);\n\n  //  models required in the api listing\n  var requiredModels = [];\n\n  //  clone methods that user can access\n  output.apis = [];\n  var apis = JSON.parse(JSON.stringify(r.apis));\n  _.forOwn(apis, function (api) {\n    var clonedApi = shallowClone(api);\n\n    clonedApi.operations = [];\n    _.forOwn(api.operations, function (operation) {\n      if (excludedPaths.indexOf(operation.method + ':' + api.path) === -1) {\n        var co = JSON.parse(JSON.stringify(operation));\n        delete co.path;\n\n        var type = toJsonType(co.type);\n        if(type) {\n          for(var nm in type) {\n            delete co[nm];\n            co[nm] = type[nm];\n          }\n        }\n        clonedApi.operations.push(co);\n        self.addModelsFromBody(operation, requiredModels);\n        self.addModelsFromResponse(operation, requiredModels);\n      }\n    });\n    //  only add cloned api if there are operations\n    if (clonedApi.operations.length > 0) {\n      output.apis.push(clonedApi);\n    }\n  });\n\n  // add required models to output\n  output.models = {};\n  _.forOwn(requiredModels, function (modelName) {\n    var model = self.allModels[modelName];\n    if (model) {\n      output.models[modelName] = model;\n    }\n  });\n\n  //  look in object graph\n  _.forOwn(output.models, function (model) {\n    if (model && model.properties) {\n      self.addPropertiesToRequiredModels(model.properties, requiredModels);\n    }\n  });\n  _.forOwn(requiredModels, function (modelName) {\n    if (!output[modelName]) {\n      var model = self.allModels[modelName];\n      if (model) {\n        output.models[modelName] = model;\n      }\n    }\n  });\n\n  return output;\n};\n\n\n\n// Add model to list and parse List[model] elements\n\nSwagger.prototype.addModelsFromBody = function(operation, models) {\n  var self = this;\n  if (operation.parameters) {\n    _.forOwn(operation.parameters, function (param) {\n      if (param.paramType === 'body' && param.type) {\n        var model = param.type.replace(/^List\\[/, '').replace(/\\]/, '');\n        models.push(model);\n      }\n    });\n  }\n};\n\n// Add model to list and parse List[model] elements\n\nSwagger.prototype.addModelsFromResponse = function(operation, models) {\n  var responseModel = operation.type;\n  if(responseModel === 'array' && operation.items) {\n    var items = operation.items;\n    if(items.$ref) {\n      models.push(items.$ref);\n    } else if (items.type && allowedDataTypes.indexOf(items.type) === -1) {\n      models.push(items.type);\n    }\n  }\n  // if not void or a json-schema type, add the model\n  else if (responseModel !== 'void' && allowedDataTypes.indexOf(responseModel) === -1) {\n    models.push(responseModel);\n  }\n};\n\n\n// function for filtering a resource.  override this with your own implementation.\n// if consumer can access the resource, method returns true.\n\nSwagger.prototype.canAccessResource = function(req, path, method) {\n  for (var i = 0; i < this.validators.length; i++) {\n    var validator = this.validators[i];\n    if (_.isFunction(validator) && !validator(req, path, method)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * returns the json representation of a resource\n *\n * @param request\n * @param response\n */\n\nSwagger.prototype.resourceListing = function(req, res) {\n  var self = this;\n  var r = {\n    'apiVersion': self.apiVersion,\n    'swaggerVersion': self.swaggerVersion,\n    'apis': []\n  };\n\n  if(self.authorizations)\n    r.authorizations = self.authorizations;\n\n  if(self.apiInfo)\n    r.info = self.apiInfo;\n\n  _.forOwn(self.resources, function (value, key) {\n    var p = '/' + key.replace(self.formatString, '');\n    r.apis.push({\n      'path': p,\n      'description': value.description\n    });\n  });\n  self.setHeaders(res);\n  res.write(JSON.stringify(r));\n  res.end();\n};\n\n// Adds a method to the api along with a spec.  If the spec fails to validate, it won't be added\n\nSwagger.prototype.addMethod = function(app, callback, spec) {\n  var self = this;\n  var apiRootPath = spec.path.split(/[\\/\\(]/)[1];\n  var root = self.resources[apiRootPath];\n\n  if (root && root.apis) {\n    // this path already exists in swagger resources\n    _.forOwn(root.apis, function (api) {\n      if (api && api.path === spec.path && api.method === spec.method) {\n        // add operation & return\n        appendToApi(root, api, spec);\n        return;\n      }\n    });\n  }\n\n  var api = {\n    'path': spec.path\n  };\n  if (!self.resources[apiRootPath]) {\n    if (!root) {\n      //\n      var resourcePath = '/' + apiRootPath.replace(self.formatString, '');\n      root = {\n        'apiVersion': self.apiVersion,\n        'swaggerVersion': self.swaggerVersion,\n        'basePath': self.basePath,\n        'resourcePath': resourcePath,\n        'apis': [],\n        'models': []\n      };\n    }\n    self.resources[apiRootPath] = root;\n  }\n\n  root.apis.push(api);\n  appendToApi(root, api, spec);\n\n  //  convert .{format} to .json, make path params happy\n  var fullPath = spec.path.replace(self.formatString, self.jsonSuffix).replace(/\\/{/g, '/:').replace(/\\}/g, '');\n  var currentMethod = spec.method.toLowerCase();\n  if (allowedMethods.indexOf(currentMethod) > -1) {\n    app[currentMethod](fullPath, function (req, res, next) {\n      self.setHeaders(res);\n\n      // todo: needs to do smarter matching against the defined paths\n      var path = req.url.split('?')[0].replace(self.jsonSuffix, '').replace(/{.*\\}/, '*');\n      if (!self.canAccessResource(req, path, req.method)) {\n        res.send(JSON.stringify({\n          'message': 'forbidden',\n          'code': 403\n        }), 403);\n      } else {\n        callback(req, res, next);\n      }\n    });\n  } else {\n    console.error('unable to add ' + currentMethod.toUpperCase() + ' handler');\n    return;\n  }\n};\n\n// Set expressjs app handler\n\n// TODO-3.0.0 REMOVE\nSwagger.prototype.setAppHandler = function(app) {\n  if (!ignoreAppHandlerInConstructor) {\n    console.warn('setAppHandler is deprecated!  Pass it to the constructor instead.');\n  }\n  this.appHandler = app;\n};\n\n// Add swagger handlers to express\n\nSwagger.prototype.addHandlers = function(type, handlers) {\n  var self = this;\n  _.forOwn(handlers, function (handler) {\n    handler.spec.method = type;\n    self.addMethod(self.appHandler, handler.action, handler.spec);\n  });\n};\n\n// Discover swagger handler from resource\n\nSwagger.prototype.discover = function(resource) {\n  var self = this;\n  _.forOwn(resource, function (handler, key) {\n    if (handler.spec && handler.spec.method && allowedMethods.indexOf(handler.spec.method.toLowerCase()) > -1) {\n      self.addMethod(self.appHandler, handler.action, handler.spec);\n    } else\n      console.error('auto discover failed for: ' + key);\n  });\n};\n\n// Discover swagger handler from resource file path\n\nSwagger.prototype.setErrorHandler= function(handler) {\n  console.warn(\n    '.setErrorHandler() has been deprecated and is no longer used!  '\n    + 'You should use middleware with your express app instead.'\n  );\n};\n\nSwagger.prototype.discoverFile = function(file) {\n  return this.discover(require(file));\n};\n\n// adds get handler\n\nSwagger.prototype.addGet = Swagger.prototype.addGET = function() {\n  this.addHandlers('GET', arguments);\n  return this;\n};\n\n// adds post handler\n\nSwagger.prototype.addPost = Swagger.prototype.addPOST = function() {\n  this.addHandlers('POST', arguments);\n  return this;\n};\n\n// adds delete handler\n\nSwagger.prototype.addDelete = Swagger.prototype.addDELETE = function() {\n  this.addHandlers('DELETE', arguments);\n  return this;\n};\n\n// adds put handler\n\nSwagger.prototype.addPut = Swagger.prototype.addPUT = function() {\n  this.addHandlers('PUT', arguments);\n  return this;\n};\n\n// adds patch handler\n\nSwagger.prototype.addPatch = Swagger.prototype.addPATCH = function() {\n  this.addHandlers('PATCH', arguments);\n  return this;\n};\n\n// adds models to swagger\n\nSwagger.prototype.addModels = function(models) {\n  models = _.cloneDeep(models).models;\n  var self = this;\n  if (!self.allModels) {\n    self.allModels = models;\n  } else {\n    _.forOwn(models, function (model, key) {\n      self.allModels[key] = model;\n    });\n  }\n  return this;\n};\n\nSwagger.prototype.addValidator = function(v) {\n  this.validators.push(v);\n};\n\n// Stop express ressource with error code\nSwagger.prototype.stopWithError = function(res, error) {\n  this.setHeaders(res);\n  if (error && error.message && error.code)\n    console.log(JSON.stringify(error));\n\n  res.send(JSON.stringify({\n    'message': 'internal error',\n    'code': 500\n  }), 500);\n};\n\nSwagger.prototype.setApiInfo = function(data) {\n  this.apiInfo = data;\n};\n\nSwagger.prototype.setAuthorizations = function(data) {\n  this.authorizations = data;\n};\n\n// Export most needed error types for easier handling\nSwagger.prototype.errors = {\n  'notFound': function (field, res) {\n    if (!res) {\n      return {\n        'code': 404,\n        'message': field + ' not found'\n      };\n    } else {\n      res.send({\n        'code': 404,\n        'message': field + ' not found'\n      }, 404);\n    }\n  },\n  'invalid': function (field, res) {\n    if (!res) {\n      return {\n        'code': 400,\n        'message': 'invalid ' + field\n      };\n    } else {\n      res.send({\n        'code': 400,\n        'message': 'invalid ' + field\n      }, 404);\n    }\n  },\n  'forbidden': function (res) {\n    if (!res) {\n      return {\n        'code': 403,\n        'message': 'forbidden'\n      };\n    } else {\n      res.send({\n        'code': 403,\n        'message': 'forbidden'\n      }, 403);\n    }\n  }\n};\n\nSwagger.prototype.configureDeclaration = function(resourceName, obj) {\n  if(this.resources[resourceName]) {\n    var resource = this.resources[resourceName];\n\n    if(obj.description) {\n      resource.description = obj.description;\n    }\n    if(obj.consumes) {\n      resource.consumes = obj.consumes;\n    }\n    if(obj.produces) {\n      resource.produces = obj.produces;\n    }\n    if(obj.protocols) {\n      resource.protocols = obj.protocols;\n    }\n    if(obj.authorizations) {\n      resource.authorizations = obj.authorizations;\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-swagger-node-express/swagger-node-express/lib/toJsonType.js":"'use strict';\n\nmodule.exports = toJsonType;\n\nvar mappings = {\n  'int': {\n    type: 'integer',\n    format: 'int32'\n  },\n  'long': {\n    type: 'integer',\n    format: 'int64'\n  },\n  'float': {\n    type: 'number',\n    format: 'float'\n  },\n  'double': {\n    type: 'number',\n    format: 'double'\n  },\n  'date': {\n    type: 'string',\n    format: 'date-time'\n  }\n};\n\nfunction toJsonType(model) {\n  if(model && mappings[model]) {\n    return mappings[model];\n  }\n}\n\n","/home/travis/build/npmtest/node-npmtest-swagger-node-express/swagger-node-express/lib/shallowClone.js":"'use strict';\n\nmodule.exports = shallowClone;\n\n// clone anything but objects to avoid shared references\nfunction shallowClone(obj) {\n  var cloned = {};\n  for (var i in obj) {\n    if (!obj.hasOwnProperty(i)) {\n      continue;\n    }\n    if (typeof (obj[i]) !== 'object') {\n      cloned[i] = obj[i];\n    }\n  }\n  return cloned;\n}\n","/home/travis/build/npmtest/node-npmtest-swagger-node-express/swagger-node-express/lib/resourceHelpers.js":"'use strict';\n\nvar _ = require('lodash');\n\nmodule.exports.wrap = wrap;\nmodule.exports.appendToApi = appendToApi;\n\nfunction wrap(callback, req, resp) {\n  callback(req, resp);\n}\n\n// appends a spec to an existing operation\n\nfunction appendToApi(rootResource, api, spec) {\n  var validationErrors = [];\n\n  if (!spec.nickname || spec.nickname.indexOf(' ') >= 0) {\n    //  nicknames don't allow spaces\n    validationErrors.push({\n      'path': api.path,\n      'error': 'invalid nickname \"' + spec.nickname + '\"'\n    });\n  }\n  // validate params\n  _.forOwn(spec.parameters, function (parameter) {\n\n    switch (parameter.paramType) {\n    case 'path':\n      if (api.path.indexOf('{' + parameter.name + '}') < 0) {\n        validationErrors.push({\n          'path': api.path,\n          'name': parameter.name,\n          'error': 'invalid path'\n        });\n      }\n      break;\n    case 'query':\n      break;\n    case 'body':\n      break;\n    case 'form':\n      break;\n    case 'header':\n      break;\n    default:\n      validationErrors.push({\n        'path': api.path,\n        'name': parameter.name,\n        'error': 'invalid param type ' + parameter.paramType\n      });\n      break;\n    }\n  });\n\n  if (validationErrors.length > 0) {\n    console.error(validationErrors);\n    return;\n  }\n\n  if (!api.operations) {\n    api.operations = [];\n  }\n\n  // TODO: replace if existing HTTP operation in same api path\n  var op = {\n    'parameters': spec.parameters,\n    'method': spec.method,\n    'notes': spec.notes,\n    'responseMessages': spec.responseMessages,\n    'nickname': spec.nickname,\n    'summary': spec.summary,\n    'consumes' : spec.consumes,\n    'produces' : spec.produces\n  };\n\n  // Add custom fields.\n  op = _.extend({}, spec, op);\n\n  if (!spec.type) {\n    op.type = 'void';\n  }\n  api.operations.push(op);\n\n  if (!rootResource.models) {\n    rootResource.models = {};\n  }\n}\n"}